{"version":3,"sources":["board.js","game.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../app.js","sourcesContent":["'use strict'\r\nclass board{\r\n    /**\r\n     * @param {Number} rows - количестов строк\r\n     * @param {Number} cols - количиество столбцов\r\n     * @param {Function} turn - Функция хода\r\n     */\r\n    constructor(rows, cols, turn) {\r\n        this.rows = rows;\r\n        this.cols = cols;\r\n        this.turn = turn;\r\n        window.addEventListener(\"click\",this.playerClick.bind(this))\r\n\r\n    }\r\n    playerClick(event){\r\n        const row = +event.target.dataset.row;\r\n        const col = +event.target.dataset.col;\r\n        if(col === undefined || row === undefined || event.target.innerText !== \"\")\r\n            return;\r\n        this.turn(row,col);\r\n    }\r\n    /**\r\n     * Отрисовка поля\r\n     */\r\n    render(){\r\n        let table = document.querySelector(\"table\");\r\n        for(let row=1; row <= this.rows; row++){\r\n            const tr = document.createElement(\"tr\");\r\n            table.appendChild(tr);\r\n            for(let col=1; col <= this.rows; col++) {\r\n                const td = document.createElement(\"td\",);\r\n                tr.appendChild(td);\r\n                td.dataset.row = row.toString();\r\n                td.dataset.col = col.toString();\r\n            }\r\n        }\r\n    }\r\n    setToken(row,col,token){\r\n        document.querySelector(`td[data-row=\"${row}\"][data-col=\"${col}\"]`).innerHTML = token;\r\n    }\r\n}","'use strict'\r\nclass game{\r\n    rows = 3;\r\n    cols = 3;\r\n    playerText = document.querySelector(\".player\");\r\n    isWin = false;\r\n\r\n    /**\r\n     * Запуск игры\r\n     */\r\n    run(){\r\n        this.board = new board(this.rows, this.cols, this.turn.bind(this));\r\n        this.initTokens();\r\n        this.board.render();\r\n        this.changePlayer();\r\n    }\r\n    initTokens(){\r\n        this.tokens = new Array(this.rows).fill(0).map(() => new Array(this.cols));\r\n    }\r\n\r\n    /**\r\n     * Ход игрока\r\n     * @param {Number} row - строка\r\n     * @param {Number} col - колонка\r\n     */\r\n    turn(row, col){\r\n        if(this.isWin)\r\n            return;\r\n        this.tokens[row-1][col-1] = this.playerNo;\r\n        this.board.setToken(row,col,this.playerNo === 1 ? \"X\":\"O\")\r\n        if(this.checkWin()){\r\n            this.playerWin();\r\n        } else {\r\n            this.changePlayer();\r\n        }\r\n    }\r\n    /**\r\n     * Смена пользователя\r\n     */\r\n    changePlayer(){\r\n        this.playerNo = (this.playerNo??2) !== 1 ? 1: 2;\r\n        this.playerText.innerText = `Ходит игрок: ${this.playerNo}`;\r\n    }\r\n    /**\r\n     * Победа пользователя\r\n     */\r\n    playerWin(){\r\n        this.playerText.innerText = `Игрок ${this.playerNo} победил !!!`;\r\n        this.playerText.classList.add(\"red\");\r\n        this.isWin = true;\r\n    }\r\n    /**\r\n     * Проверка выиграша\r\n     * @returns {boolean}\r\n     */\r\n    checkWin(){\r\n        return this.checkPoints([{x:0,y:0},{x:0,y:1}, {x:0,y:2}]) || this.checkPoints([{x:1,y:0},{x:1,y:1}, {x:1,y:2}]) || this.checkPoints([{x:2,y:0},{x:2,y:1}, {x:2,y:2}]) ||\r\n        this.checkPoints([{x:0,y:0},{x:1,y:0}, {x:2,y:0}]) || this.checkPoints([{x:0,y:1},{x:1,y:1}, {x:2,y:1}]) || this.checkPoints([{x:0,y:2},{x:1,y:2}, {x:2,y:2}]) ||\r\n        this.checkPoints([{x:0,y:0},{x:1,y:1}, {x:2,y:2}]) || this.checkPoints([{x:2,y:0},{x:1,y:1}, {x:0,y:2}]);\r\n    }\r\n\r\n    /**\r\n     * Проверка совпадения точек (либо все 1, либо все 0)\r\n     * @param {{x:Number, y: Number}[]} points Список точек для проверки\r\n     * @returns {boolean}\r\n     */\r\n    checkPoints(points){\r\n        let token = null;\r\n        for(let point of points)\r\n        {\r\n            if(token === null)\r\n                token = this.tokens[point.x][point.y];\r\n            if(token === undefined || token !== this.tokens[point.x][point.y])\r\n                    return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nwindow.addEventListener(\"load\",() => new game().run());"]}